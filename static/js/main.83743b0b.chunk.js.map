{"version":3,"sources":["components/Plot.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Plot","width","height","data","usingLinear","getMinMaxOf2DIndex","arr","idx","min","Math","apply","map","e","max","ref","useRef","useEffect","d3","current","attr","draw","svg","selectAll","remove","selection","console","log","yMinMax","xMinMax","scaleX","domain","range","scaleY","xAxis","scale","yAxis","enter","append","d","xAxisTranslate","call","tickFormat","className","style","padding","App","useState","sequence","setSequence","index","description","link","seqInfo","setSeqInfo","useLinear","setUseLinear","fetchOEIS","seq","String","floor","random","padStart","$","ajax","url","dataType","success","text","newSeq","split","line","test","pair","xVal","parseInt","yVal","length","Infinity","push","parseData","complete","substring","href","window","innerWidth","innerHeight","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oRAmIeA,MA/Hf,YAAoD,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,YAGjC,SAASC,EAAoBC,EAAKC,GAC9B,MAAO,CACHC,IAAKC,KAAKD,IAAIE,MAAM,KAAMJ,EAAIK,KAAI,SAAUC,GAAK,OAAOA,EAAEL,OAC1DM,IAAKJ,KAAKI,IAAIH,MAAM,KAAMJ,EAAIK,KAAI,SAAUC,GAAK,OAAOA,EAAEL,QAIlE,IAAMO,EAAMC,mBAEZC,qBAAU,WACMC,IAAUH,EAAII,SACrBC,KAAK,QAASlB,GACdkB,KAAK,SAAUjB,KACrB,IAEHc,qBAAU,WACNI,MACD,CAACjB,EAAMC,IAEV,IAAMgB,EAAO,WAGT,IAAMC,EAAMJ,IAAUH,EAAII,SAE1BG,EAAIC,UAAU,KAAKC,SASnB,IAAIC,EAAYH,EAAIC,UAAU,UAAUC,SAASpB,KAAKA,GACtDsB,QAAQC,IAAIvB,GAEZ,IAAIwB,EAAUtB,EAAmBF,EAAM,GACnCyB,EAAUvB,EAAmBF,EAAM,GAC3BwB,EAAQd,IAAIc,EAAQd,IAEhCY,QAAQC,IAAI,cAAeC,EAASC,GAGpC,IAAIC,EAASZ,MACQa,OAAO,CAACF,EAAQpB,IAAM,EAAGoB,EAAQf,IAAM,IACvCkB,MAAM,CAAC,GAAI9B,EAAM,KAEtC,GAAIG,EACA,IAAI4B,EAASf,WAITe,EAASf,MAGjBe,EAAOF,OAAO,CAACH,EAAQnB,IAAKmB,EAAQd,MACnCkB,MAAM,CAAQ,EAAP7B,EAAS,EAAG,KAGpB,IAAI+B,EAAQhB,MACCiB,MAAML,GACfM,EAAQlB,MACCiB,MAAMF,GAenBR,EACCrB,KAAKA,GAAMiC,QACXC,OAAO,UACPlB,KAAK,YAAa,kBAElBA,KAAK,MAAM,SAASmB,GAAI,OAAOT,EAAOS,EAAE,OACxCnB,KAAK,MAAM,SAASmB,GAAI,OAAON,EAAOM,EAAE,OACxCnB,KAAK,IAAK,GACVA,KAAK,OAAQ,UAad,IAAIoB,EAAwB,EAAPrC,EAAS,EAAI,GAElCmB,EAAIgB,OAAO,KACVlB,KAAK,QAAS,UACdA,KAAK,YAAa,gBAAkBoB,EAAiB,KACrDC,KAAKP,GAELZ,EAAIgB,OAAO,KACXlB,KAAK,QAAS,UACdA,KAAK,YAAa,qBAClBqB,KAAKL,EAAMM,WAAWxB,IAAU,WAMrC,OACI,yBAAKyB,UAAU,QAAQC,MAAO,CAACC,QAAQ,KACnC,yBAAK9B,IAAKA,MCTP+B,MA7Gf,WAAgB,IAAD,EACiBC,mBAAS,CAAC,CAAC,EAAG,KAD/B,mBACRC,EADQ,KACEC,EADF,OAEeF,mBAAS,CAAEG,MAAO,SAAUC,YAAa,aAAcC,KAAM,oBAF5E,mBAERC,EAFQ,KAECC,EAFD,OAImBP,oBAAS,GAJ5B,mBAIRQ,EAJQ,KAIGC,EAJH,KAgDb,SAASC,IAIP,IAAIC,EAAcC,OAAOjD,KAAKkD,MAAsB,KAAhBlD,KAAKmD,WAAoBC,SAAS,EAAG,KACzEC,IAAEC,KAAK,CACLC,IAAI,iEAAD,OAAmEP,EAAnE,aAA2EA,EAA3E,QAEHQ,SAAU,OACVC,QAAU,SAAU/D,GAOlB,OA1CN,SAAmBgE,GACjB,IAD+B,EAC3BC,EAAqB,GAErB9D,EAAM6D,EAAKE,MAAM,MAHU,cAId/D,GAJc,IAI/B,2BAAsB,CAAC,IAAdgE,EAAa,QACpB,GAAI,QAAQC,KAAKD,EAAK,IAAK,CACzB,IAAIE,EAAOF,EAAKD,MAAM,KAGlBI,EAAeC,SAASF,EAAK,IAC7BG,EAAeD,SAASF,EAAK,IAEjC,KAAIJ,EAAOQ,OAAS,KAAUD,IAASE,KAAYF,KAAUE,KAC3DJ,IAASI,KAAYJ,KAAUI,KAI/B,MAHAT,EAAOU,KAAK,CAACL,EAAME,MAdM,8BAuB/B,OAFA3B,EAAYoB,GAELA,EAmBIW,CANY5E,IAerB6E,SAAW,WACTlB,IAAEC,KAAK,CACLE,SAAU,OAEVD,IAAI,6EAAD,OAA+EP,EAA/E,aACHS,QAAU,SAAU/D,GACpB,IAD0B,EACtBG,EAAeH,EAAKkE,MAAM,MADJ,cAET/D,GAFS,IAE1B,2BAAsB,CAAC,IAAdgE,EAAa,QAEpB,GAA6B,OAAzBA,EAAKW,UAAU,EAAG,GAAa,CACjC5B,EAAW,CAAEJ,MAAOQ,EAAKN,KAAK,qBAAD,OAAuBM,GAAOP,YAAaoB,EAAKW,UAAU,MACvFxD,QAAQC,IAAI,OAAQ4C,GACpB,QAPsB,qCAmBlC,OA1FAtD,qBAAW,WACTwC,MACC,IAyFD,yBAAKd,UAAU,OACb,4BAAI,uBAAGwC,KAAM9B,EAAQD,MAAjB,IAAyBC,EAAQH,QACrC,2BAAIG,EAAQF,aACXH,GAAY,kBAAC,EAAD,CAAM9C,MAAOkF,OAAOC,WAAW,EAAGlF,OAA2B,EAAnBiF,OAAOE,YAAc,EAAGlF,KAAM4C,EAAU3C,YAAakD,IAC5G,4BAAQgC,QAAS9B,GAAjB,mBACA,4BAAQ8B,QA5FZ,WAME,OAJE/B,GADED,GAKGA,IAsFL,wBChGciC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9E,QAAQ8E,MAAMA,EAAMC,c","file":"static/js/main.83743b0b.chunk.js","sourcesContent":["// Plot.js\nimport * as d3 from 'd3';\nimport React, { useRef, useEffect } from 'react';\n\nfunction Plot({ width, height, data, usingLinear }){\n\n    // https://stackoverflow.com/a/23398499\n    function getMinMaxOf2DIndex (arr, idx) {\n        return {\n            min: Math.min.apply(null, arr.map(function (e) { return e[idx]})),\n            max: Math.max.apply(null, arr.map(function (e) { return e[idx]}))\n        }\n    } \n\n    const ref = useRef();\n\n    useEffect(() => {\n        const svg = d3.select(ref.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n    }, []);\n\n    useEffect(() => {\n        draw();\n    }, [data, usingLinear]);\n\n    const draw = () => {\n\n\n        const svg = d3.select(ref.current);\n        // Clear svg before drawing\n        svg.selectAll(\"*\").remove();\n\n        // svg.append(\"rect\")\n        // .attr(\"width\", \"100%\")\n        // .attr(\"height\", \"100%\")\n        // .attr(\"fill\", \"pink\")\n        // .attr(\"rx\", \"2%\")\t\t\t\t\t\t\t\t// how much to round corners - to be transitioned below\n     \n        \n        var selection = svg.selectAll(\"circle\").remove().data(data);\n        console.log(data)\n\n        var yMinMax = getMinMaxOf2DIndex(data, 1);\n        var xMinMax = getMinMaxOf2DIndex(data, 0);\n        var avgY = (yMinMax.max-yMinMax.max)/2\n\n        console.log(\"max data is\", yMinMax, xMinMax)\n\n\n        var scaleX = d3.scaleLinear()\n                            .domain([xMinMax.min - 1, xMinMax.max + 1])\n                            .range([55, width-50]);\n\n        if (usingLinear) {\n            var scaleY = d3.scaleLinear()\n\n        }\n        else {\n            var scaleY = d3.scaleSymlog()\n        }\n\n        scaleY.domain([yMinMax.min, yMinMax.max])\n        .range([height*5/6, 20]);\n\n        // Add axes\n        var xAxis = d3.axisBottom()\n                    .scale(scaleX);\n        var yAxis = d3.axisLeft()\n                    .scale(scaleY);\n\n        \n        // Draw lolipop lines\n        // svg.selectAll(\"myline\")\n        // .data(data).enter()\n        // .append(\"line\")\n        // .attr(\"x1\", function(d) { return scaleX(d[0]); })\n        // .attr(\"x2\", function(d) { return scaleX(d[0]); })\n        // .attr(\"y1\", function(d) {return scaleY(d[1])})\n        // .attr(\"y2\", scaleY(yMinMax.min))\n        // .attr(\"stroke\", \"grey\")\n\n\n        // Plot points\n        selection\n        .data(data).enter()\n        .append(\"circle\")\n        .attr('transform', 'translate(' + 0 +',' + '0)')\n\n        .attr(\"cx\", function(d) {return scaleX(d[0])})\n        .attr(\"cy\", function(d) {return scaleY(d[1])})\n        .attr(\"r\", 5)\n        .attr(\"fill\", \"orange\")\n        \n\n\n\n\n        // selection\n        //     .exit()\n        //     .transition().duration(300)\n        //         .attr(\"y\", (d) => height)\n        //         .attr(\"height\", 0)\n        //     .remove()\n\n        var xAxisTranslate = height*5/6 + 10;\n\n        svg.append(\"g\")\n        .attr(\"class\", \"axis x\")\n        .attr(\"transform\", \"translate(0, \" + xAxisTranslate  +\")\")\n        .call(xAxis)\n\n         svg.append(\"g\")\n        .attr(\"class\", \"axis y\")\n        .attr(\"transform\", \"translate(50, 10)\")\n        .call(yAxis.tickFormat(d3.format(\"0.1e\")));\n        \n\n         }\n\n\n    return (\n        <div className=\"chart\" style={{padding:10}}>\n            <svg ref={ref} >\n            </svg>\n        </div>\n        \n    )\n\n}\n\nexport default Plot;","import React, { useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport $ from 'jquery'\nimport Plot from './components/Plot'\nfunction App() {\n  let [sequence, setSequence] = useState([[0, 0]])\n  let [seqInfo, setSeqInfo] = useState({ index: \"000000\", description: \"Loading...\", link: \"http://oeis.org\" })\n  // True if linear y scale, false if log y scale\n  let [useLinear, setUseLinear] = useState(true)\n  // let [sequence, setSequence] = useState([1,2,3,4,5])\n\n  useEffect( () => {\n    fetchOEIS();\n  }, [])\n\n  function toggleLinearLog() {\n    if (useLinear) {\n      setUseLinear(false);\n    } else {\n      setUseLinear(true);\n    }\n    return useLinear\n  }\n\n  // Parses and cleans the b-file .txt\n  // Returns two lists xList and yList\n  function parseData(text: string) {\n    let newSeq: number[][] = [];\n\n    let arr = text.split('\\n');\n    for (let line of arr) {\n      if (/^\\d+$/.test(line[0])) {\n        let pair = line.split(\" \");\n        // console.log(\"x\", parseInt(pair[0]), \"y\", parseInt(pair[1]));\n\n        let xVal: number = parseInt(pair[0]);\n        let yVal: number = parseInt(pair[1]);\n        // Check NaN \n        if (newSeq.length < 2000 && !(yVal === Infinity || yVal === -Infinity ||\n          xVal === Infinity || xVal === -Infinity)) {\n          newSeq.push([xVal, yVal]);\n        }\n        else {\n          break;\n        }\n      }\n    }\n    setSequence(newSeq)\n\n    return newSeq;\n  }\n\n  function fetchOEIS() {\n\n    // Fetch a random OEIS sequence\n    // Pad the beginning with zeros\n    let seq: string = String(Math.floor(Math.random() * 340000)).padStart(6, '0');\n    $.ajax({\n      url: `https://desolate-refuge-92417.herokuapp.com/https://oeis.org/A${seq}/b${seq}.txt`,\n\n      dataType: \"text\",\n      success: (function (data) {\n        let text: string = data;\n\n        // Debugging: print data\n        // console.log(text)\n        // console.log(sequence)\n\n        return parseData(text);\n      }),\n      // error: (function () {\n        // If failed, keep searching for another random sequence\n        // fetchOEIS()\n\n      // }),\n      // If successful, go to the info page and fetch its description\n      // Set set sequence info state\n      complete: (function () {\n        $.ajax({\n          dataType: \"text\",\n\n          url: `https://desolate-refuge-92417.herokuapp.com/https://oeis.org/search?q=id:A${seq}&fmt=text`,\n          success: (function (data) {\n          let arr : string = data.split('\\n')\n          for (let line of arr) {\n            // Get only the \"%N\" tag which is the description\n            if (line.substring(0, 2) === \"%N\") {\n              setSeqInfo({ index: seq, link: `https://oeis.org/A${seq}`, description: line.substring(11) })\n              console.log(\"desc\", line)\n              break;\n            }\n          }\n\n        })\n      })\n\n    })\n  })\n\n  }\n\n  return (\n    <div className=\"App\">\n      <h1><a href={seqInfo.link}>A{seqInfo.index}</a></h1>\n      <p>{seqInfo.description}</p>\n      {sequence && <Plot width={window.innerWidth/2} height={window.innerHeight*3/4} data={sequence} usingLinear={useLinear}></Plot>}\n      <button onClick={fetchOEIS}> New sequence! </button>\n      <button onClick={toggleLinearLog}> Linear/log scale </button>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}