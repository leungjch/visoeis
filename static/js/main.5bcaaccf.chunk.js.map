{"version":3,"sources":["components/BarChart.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BarChart","width","height","data","usingLinear","getMinMaxOf2DIndex","arr","idx","min","Math","apply","map","e","max","ref","useRef","useEffect","d3","current","attr","draw","svg","selectAll","remove","selection","console","log","yMinMax","xMinMax","avgY","scaleX","domain","range","scaleY","enter","append","d","className","App","useState","sequence","setSequence","index","description","link","seqInfo","setSeqInfo","useLinear","setUseLinear","href","onClick","fetchOEIS","seq","String","floor","random","padStart","$","get","text","newSeq","split","line","test","pair","xVal","parseInt","yVal","length","Infinity","push","parseData","done","substring","fail","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5bcaaccf.chunk.js","sourcesContent":["// BarChart.js\nimport * as d3 from 'd3';\nimport React, { useRef, useEffect } from 'react';\n\nfunction BarChart({ width, height, data, usingLinear }){\n\n    // https://stackoverflow.com/a/23398499\n    function getMinMaxOf2DIndex (arr, idx) {\n        return {\n            min: Math.min.apply(null, arr.map(function (e) { return e[idx]})),\n            max: Math.max.apply(null, arr.map(function (e) { return e[idx]}))\n        }\n    } \n\n    const ref = useRef();\n\n    useEffect(() => {\n        const svg = d3.select(ref.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n    }, []);\n\n    useEffect(() => {\n        draw();\n    }, [data, usingLinear]);\n\n    const draw = () => {\n\n\n        const svg = d3.select(ref.current);\n        // Clear svg before drawing\n        svg.selectAll(\"*\").remove();\n\n        // svg.append(\"rect\")\n        // .attr(\"width\", \"100%\")\n        // .attr(\"height\", \"100%\")\n        // .attr(\"fill\", \"pink\")\n        // .attr(\"rx\", \"2%\")\t\t\t\t\t\t\t\t// how much to round corners - to be transitioned below\n     \n        \n        var selection = svg.selectAll(\"circle\").remove().data(data);\n        console.log(data)\n\n        var yMinMax = getMinMaxOf2DIndex(data, 1);\n        var xMinMax = getMinMaxOf2DIndex(data, 0);\n        var avgY = (yMinMax.max-yMinMax.max)/2\n\n        console.log(\"max data is\", yMinMax, xMinMax)\n\n\n        var scaleX = d3.scaleLinear()\n                            .domain([xMinMax.min - 1, xMinMax.max + 1])\n                            .range([20, width-20]);\n\n        if (usingLinear) {\n            var scaleY = d3.scaleLinear()\n\n        }\n        else {\n            var scaleY = d3.scaleSymlog()\n            console.log(\"Used log scale\")\n        }\n\n        scaleY.domain([yMinMax.min-avgY/10, yMinMax.max+avgY/10])\n        .range([height-10, 10]);\n        \n        // Draw lolipop lines\n        // svg.selectAll(\"myline\")\n        // .data(data).enter()\n        // .append(\"line\")\n        // .attr(\"x1\", function(d) { return scaleX(d[0]); })\n        // .attr(\"x2\", function(d) { return scaleX(d[0]); })\n        // .attr(\"y1\", function(d) {return scaleY(d[1])})\n        // .attr(\"y2\", scaleY(yMinMax.min))\n        // .attr(\"stroke\", \"grey\")\n\n\n        // Plot points\n        selection\n        .data(data).enter()\n        .append(\"circle\")\n        .attr(\"cx\", function(d) {return scaleX(d[0])})\n        .attr(\"cy\", function(d) {return scaleY(d[1])})\n        .attr(\"r\", 5)\n        \n\n\n        // selection\n        //     .exit()\n        //     .transition().duration(300)\n        //         .attr(\"y\", (d) => height)\n        //         .attr(\"height\", 0)\n        //     .remove()\n\n         }\n\n\n    return (\n        <div className=\"chart\">\n            <svg ref={ref}>\n            </svg>\n        </div>\n        \n    )\n\n}\n\nexport default BarChart;","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport $ from 'jquery'\nimport BarChart from './components/BarChart'\nfunction App() {\n  let [sequence, setSequence] = useState([[0,0],[1,1],[2,2],[3,3]])\n  let [seqInfo, setSeqInfo] = useState({index:\"0001\", description:\"Hillo\", link:\"http://oeis.org\"})\n  // True if linear y scale, false if log y scale\n  let [useLinear, setUseLinear] = useState(true)\n  // let [sequence, setSequence] = useState([1,2,3,4,5])\n\n\n  function toggleLinearLog() {\n    if (useLinear) {\n      setUseLinear(false);\n      console.log(\"Linear is\", useLinear)\n\n    } else {\n      setUseLinear(true);\n      console.log(\"Linear is\", useLinear)\n\n    }\n    return useLinear\n  }\n\n  // Parses and cleans the b-file .txt\n  // Returns two lists xList and yList\n  function parseData(text : string){\n    let newSeq: number[][] = [];\n\n    let arr = text.split('\\n');\n    for (let line of arr) {\n      if (/^\\d+$/.test(line[0])) {\n        let pair = line.split(\" \");\n        // console.log(\"x\", parseInt(pair[0]), \"y\", parseInt(pair[1]));\n        \n        let xVal : number = parseInt(pair[0]);\n        let yVal : number = parseInt(pair[1]);\n        // Check NaN \n        if (newSeq.length < 2000 && !(yVal === Infinity || yVal === -Infinity ||\n                                      xVal === Infinity || xVal === -Infinity))\n        {\n          newSeq.push([xVal, yVal]);  \n        }\n        else {\n          break;\n        }\n      }\n    }\n    setSequence(newSeq)\n\n    return newSeq;\n  }\n\n  function fetchOEIS() {\n\n  // Fetch a random OEIS sequence\n  // Pad the beginning with zeros\n  let seq : string = String(Math.floor(Math.random()*340000)).padStart(6, '0');\n  console.log(`http://oeis.org/A${seq}/b${seq}.txt`);\n  $.get( `http://oeis.org/A${seq}/b${seq}.txt`, function( data ) {\n    let text : string = data;\n\n    // Debugging: print data\n    // console.log(text)\n    // console.log(sequence)\n    \n    return parseData(text);\n  })\n  // If successful, go to the info page and fetch its description\n  // Set set sequence info state\n  .done(function() {\n    $.get( `http://oeis.org/search?q=id:A${seq}&fmt=text`, function( data ) {\n      let arr = data.split('\\n')\n      for (let line of arr) {\n        // Get only the \"%N\" tag which is the description\n        if (line.substring(0,2) === \"%N\")\n        {\n          setSeqInfo({index:seq, link:`http://oeis.org/A${seq}`, description: line.substring(11)})\n          console.log(\"desc\", line)\n          break;\n        }\n      }\n      \n  })})\n  // If failed, keep searching for another random sequence\n  .fail(function() {\n    fetchOEIS()\n  })\n  }\n\n  return (\n    <div className=\"App\">\n      <h1><a href={seqInfo.link}>A{seqInfo.index}</a></h1> \n      <p>{seqInfo.description}</p>\n      {sequence && <BarChart width={1500} height={900} data={sequence} usingLinear = {useLinear}></BarChart>}\n      <button onClick={fetchOEIS}> New sequence! </button>\n      <button onClick={toggleLinearLog}> Linear/log scale </button>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}